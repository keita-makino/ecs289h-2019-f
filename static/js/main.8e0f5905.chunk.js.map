{"version":3,"sources":["resolvers.tsx","App.tsx","data/texture.jpg","data/sky.jpg","utils/getPoint.ts","utils/getScale.ts","utils/getColorFromString.ts","components/Flights.tsx","components/Airports.tsx","components/Paths.tsx","components/InfoPanel.tsx","utils/getAirport.ts","utils/recoginizeInput.ts","utils/speechToText.ts","components/Main.tsx","serviceWorker.ts","index.tsx","data/Airport.ts","utils/fetchData.ts"],"names":["typeDefs","gql","resolvers","cache","InMemoryCache","client","ApolloClient","writeData","data","airports","paths","flights","lastFetch","time","__typename","mode","hot","module","fetchData","airport","console","log","className","apolloClient","exports","getPoint","_lat","_lng","cosLat","Math","cos","PI","sinLat","sin","x","z","y","Vector3","getAngle","vec1","vec2","Distance","acos","Dot","normalize","getScale","org","dst","current","progress","distancePoints","getColorFromString","text","array","split","map","item","charCodeAt","Color3","onSceneMount","scene","a","async","mesh","meshes","filter","name","length","billboardMode","Mesh","BILLBOARDMODE_ALL","Flights","props","useBabylonScene","useApolloClient","useState","component","setComponent","useEffect","selected","index","currentPosition","latitude","longitude","origin","find","icao","destination","indexOf","originPosition","destinationPosition","scale","traces","Array","fill","i","Lerp","asArray","push","airline","ident","substring","JSON","stringify","id","type","item2","iata","groundspeed","heading","metadata","radius","subdivisions","position","emissiveColor","reservedDataStore","width","height","add","createForParentMesh","fontFamily","fontStyle","fontSize","color","toHexString","outlineWidth","outlineColor","f","n","Airports","large","Paths","path","t","InfoPanel","getMeshByID","camera","activeCamera","flightPosition","info","getForwardRay","direction","subtract","undefined","Zero","renderingGroupId","Object","keys","values","toString","replace","alpha","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_LEFT","getAirport","recognizeInput","recognizer","recognizeOnceAsync","_result","result","param","aircraft","error","speechToText","audioConfig","sdk","fromDefaultMicrophoneInput","speechConfig","fromSubscription","speechRecognitionLanguage","query","Main","useQuery","setInfo","isVR","setIsVr","projection","setProjection","babylonJSContext","useContext","BabylonJSContext","antialias","window","innerWidth","innerHeight","canvasId","onScenePointerMove","event","pickInfo","hit","pickedMesh","Number","waypoints","onScenePointerUp","vrHelper","createDefaultVRExperience","enableInteractions","currentVRCamera","onControllerMeshLoaded","contoller","displayLaserPointer","onPadValuesChangedObservable","state","hand","rotation","deviceRotationQuaternion","move","rotateByQuaternionToRef","onTriggerStateChangedObservable","value","target","beta","lowerRadiusLimit","upperRadiusLimit","wheelPrecision","intensity","diameter","segments","specularColor","url","texture","onLoad","coordinatesMode","sideOrientation","sky","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","icaoList","args","axios","post","params","code","response","SearchBirdseyeInFlightResult","includes","Date","now"],"mappings":"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","file":"static/js/main.8e0f5905.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const typeDefs = gql`\n  extend type Query {\n    airport(icao: String!): Airport\n    flight(ident: String!): Flight\n  }\n  type Airport {\n    icao: String\n    latitude: Float\n    longitude: Float\n  }\n  type Flight {\n    ident: String\n    type: String\n    origin: Airport\n    destination: Airport\n    latitude: Float\n    longitude: Float\n    groundspeed: Float\n    heading: Float\n  }\n`;\n\nexport const resolvers = {};\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport './App.css';\n\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport fetchData from './utils/fetchData';\nimport { resolvers, typeDefs } from './resolvers';\n\nimport Main from './components/Main';\n\nimport airports from './data/airports.json';\n\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({ cache, resolvers, typeDefs });\n\nclient.writeData({\n  data: {\n    airports: airports,\n    paths: [],\n    flights: [],\n    lastFetch: { time: 0, __typename: 'lastFetch' },\n    mode: { mode: 0, __typename: 'mode' }\n  }\n});\n\nconst App: React.FC = () => {\n  fetchData({ airport: 'KSFO' }, client);\n  console.log(client.cache);\n  return (\n    <div className=\"App\">\n      <Main apolloClient={client} />\n    </div>\n  );\n};\n\nexport default hot(module)(App);\n","module.exports = __webpack_public_path__ + \"static/media/texture.45ae6884.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.1e094b0f.jpg\";","import { Vector3 } from '@babylonjs/core';\n\n// Taken from stackoverflow.com\n// Original Question: https://stackoverflow.com/questions/28365948/\n// Answer: https://stackoverflow.com/a/28367325/5734187\n// Author: John Smith (https://stackoverflow.com/users/1712905)\n\nconst getPoint = (_lat: number, _lng: number) => {\n  const cosLat = Math.cos((_lat * Math.PI) / 180.0);\n  const sinLat = Math.sin((_lat * Math.PI) / 180.0);\n  const cosLon = Math.cos((_lng * Math.PI) / 180.0);\n  const sinLon = Math.sin((_lng * Math.PI) / 180.0);\n  const x = 100 * cosLat * cosLon;\n  const z = 100 * cosLat * sinLon;\n  const y = 100 * sinLat;\n\n  return new Vector3(x, y, z);\n};\n\nexport default getPoint;\n","import { Vector3 } from '@babylonjs/core';\n\nconst getAngle = (vec1: Vector3, vec2: Vector3) => {\n  return Vector3.Distance(vec1, vec2) < 0.0001\n    ? 0\n    : Math.acos(Vector3.Dot(vec1.normalize(), vec2.normalize()));\n};\n\nconst getScale = (org: Vector3, dst: Vector3, current: Vector3) => {\n  const progress =\n    Math.PI *\n    (getAngle(org, current) /\n      (getAngle(org, current) + getAngle(current, dst)));\n  const distancePoints = getAngle(org, dst);\n  return 1 + (Math.sin(progress) * distancePoints) / 2;\n};\n\nexport default getScale;\n","import { Color3 } from '@babylonjs/core';\n\nconst getColorFromString = (text: string) => {\n  const array = text\n    .split('')\n    .map(item => ((item.charCodeAt(0) * 100) % 256) / 256);\n  return new Color3(array[0], array[1], array[2]);\n};\n\nexport default getColorFromString;\n","import React, { useEffect, useState } from 'react';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Flight } from '../data/Flight';\nimport getPoint from '../utils/getPoint';\nimport { Airport } from '../data/Airport';\nimport {\n  Color3,\n  Vector3,\n  Mesh,\n  Scene as BabylonJSScene\n} from '@babylonjs/core';\nimport getScale from '../utils/getScale';\nimport { Path, Trace } from '../data/Path';\nimport getColorFromString from '../utils/getColorFromString';\nimport { useBabylonScene } from 'react-babylonjs';\n\ntype Props = {\n  n: number;\n  data: { airports: Airport[]; flights: Flight[] };\n};\n\nconst onSceneMount = async (scene: BabylonJSScene) => {\n  const mesh = scene.meshes.filter(item => item.name === 'flight');\n  if (mesh.length > 0) {\n    mesh.map(item => (item.billboardMode = Mesh.BILLBOARDMODE_ALL));\n  }\n};\n\nconst Flights: React.FC<Props> = (props: Props) => {\n  const scene = useBabylonScene();\n  const client = useApolloClient();\n  const flights = props.data.flights;\n\n  const [component, setComponent] = useState([] as JSX.Element[]);\n\n  useEffect(() => {\n    const airports = props.data.airports as Airport[];\n    airports.map(item => (item.selected = 0));\n    setComponent([] as JSX.Element[]);\n    console.log(component);\n    const f = async () => {\n      const paths = [] as Path[];\n      await flights.map(async (item: Flight, index: number) => {\n        const currentPosition = getPoint(item.latitude, item.longitude);\n        const origin = airports.find(\n          (airport: Airport) => airport.icao === item.origin\n        ) as Airport;\n        const destination = airports.find(\n          (airport: Airport) => airport.icao === item.destination\n        ) as Airport;\n\n        airports[airports.indexOf(origin)].selected = 1;\n        airports[airports.indexOf(destination)].selected = 1;\n\n        const originPosition = getPoint(origin.latitude, origin.longitude);\n        const destinationPosition = getPoint(\n          destination.latitude,\n          destination.longitude\n        );\n        const scale = getScale(\n          originPosition,\n          destinationPosition,\n          currentPosition\n        );\n\n        const traces = [] as Trace[];\n        Array(21)\n          .fill(0)\n          .map((i, index) => {\n            const currentPosition = Vector3.Lerp(\n              originPosition,\n              destinationPosition,\n              index / 20\n            );\n            const scale = getScale(\n              originPosition,\n              destinationPosition,\n              currentPosition\n            );\n            const [x, y, z] = currentPosition\n              .normalize()\n              .scale(100 * scale)\n              .asArray();\n            traces.push({\n              x: x,\n              y: y,\n              z: z,\n              __typename: 'trace'\n            });\n          });\n        paths.push({\n          airline: item.ident.substring(0, 2),\n          traces: traces,\n          __typename: 'path'\n        });\n        console.log(JSON.stringify(item));\n        setComponent(component => [\n          ...component,\n          <icoSphere\n            id={`flight ${item.type} ${item.ident} ${item.latitude} ${\n              item.longitude\n            } ${airports.filter(item2 => item2.icao === item.origin)[0].iata} ${\n              airports.filter(item2 => item2.icao === item.destination)[0].iata\n            } ${item.groundspeed} ${item.heading}`}\n            name={`flight`}\n            metadata={{ data: JSON.stringify(item) }}\n            radius={1.25}\n            subdivisions={4}\n            position={currentPosition.scale(100 * scale)}\n          >\n            <standardMaterial\n              name={`flight ${index} material`}\n              emissiveColor={getColorFromString(item.type)}\n            ></standardMaterial>\n          </icoSphere>,\n          <plane\n            id={`flight ${item.type} ${item.ident} ${item.latitude} ${\n              item.longitude\n            } ${airports.filter(item2 => item2.icao === item.origin)[0].iata} ${\n              airports.filter(item2 => item2.icao === item.destination)[0].iata\n            } ${item.groundspeed} ${item.heading}`}\n            name={`flight`}\n            reservedDataStore={{ data: JSON.stringify(item) }}\n            width={10}\n            height={10}\n            position={currentPosition\n              .scale(scale * 100)\n              .add(currentPosition.normalize().scale(2.5))}\n          >\n            <advancedDynamicTexture\n              name=\"dialogTexture\"\n              height={1024}\n              width={1024}\n              createForParentMesh={true}\n            >\n              <rectangle name=\"rect-1\" height={150} width={150}>\n                <rectangle>\n                  <babylon-button\n                    width={40}\n                    height={10}\n                    name={`flight ${item.type}`}\n                  >\n                    <textBlock\n                      text={item.ident}\n                      fontFamily=\"Segoe UI\"\n                      fontStyle=\"bold\"\n                      fontSize={200}\n                      color={getColorFromString(item.type).toHexString()}\n                      outlineWidth={15}\n                      outlineColor={'white'}\n                    />\n                  </babylon-button>\n                </rectangle>\n              </rectangle>\n            </advancedDynamicTexture>\n          </plane>\n        ]);\n      });\n      console.log({\n        airports: airports,\n        paths: paths\n      });\n      client.writeData({\n        data: {\n          airports: airports,\n          paths: paths\n        }\n      });\n      await onSceneMount(scene!);\n    };\n    f();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.n]);\n\n  return <>{component}</>;\n};\n\nexport default Flights;\n","import { Color3, Scene as BabylonJSScene, Mesh } from '@babylonjs/core';\nimport React, { useContext, useEffect } from 'react';\nimport { Airport } from '../data/Airport';\nimport getPoint from '../utils/getPoint';\nimport { useBabylonScene } from 'react-babylonjs';\n\ntype Props = {\n  n: number;\n  data: Airport[];\n};\n\nconst onSceneMount = async (scene: BabylonJSScene) => {\n  const mesh = scene.meshes.filter(item => item.name === 'airport');\n  if (mesh.length > 0) {\n    mesh.map(item => (item.billboardMode = Mesh.BILLBOARDMODE_ALL));\n  }\n};\n\nconst Airports: React.FC<Props> = (props: Props) => {\n  const scene = useBabylonScene();\n  console.log(scene);\n\n  const airports = props.data.filter((item: any) => item.selected > 0);\n\n  useEffect(() => {\n    const f = async () => {\n      await onSceneMount(scene!);\n    };\n    f();\n  });\n  return (\n    <>\n      {airports.map((item: Airport, index: number) => {\n        const currentPosition = getPoint(item.latitude, item.longitude);\n        return (\n          <>\n            <icoSphere\n              id={`airport ${item.icao}`}\n              name={`airport`}\n              radius={item.large ? 3 : 1.5}\n              subdivisions={1}\n              position={currentPosition}\n            >\n              <standardMaterial\n                name={`airport ${index} material`}\n                emissiveColor={new Color3(1, 1, 1)}\n              ></standardMaterial>\n            </icoSphere>\n            <plane\n              id={`airport ${item.icao}`}\n              name={`airport`}\n              width={10}\n              height={10}\n              position={currentPosition.scale(1.05)}\n            >\n              <advancedDynamicTexture\n                name=\"dialogTexture\"\n                height={1024}\n                width={1024}\n                createForParentMesh={true}\n              >\n                <rectangle name=\"rect-1\" height={150} width={150}>\n                  <rectangle>\n                    <babylon-button\n                      width={10}\n                      height={10}\n                      name={`airport ${item.icao}`}\n                    >\n                      <textBlock\n                        text={item.iata}\n                        fontFamily=\"Segoe UI\"\n                        fontStyle=\"bold\"\n                        fontSize={300}\n                        color=\"#222222\"\n                        outlineWidth={25}\n                        outlineColor={'white'}\n                      />\n                    </babylon-button>\n                  </rectangle>\n                </rectangle>\n              </advancedDynamicTexture>\n            </plane>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Airports;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Color3,\n  Scene as BabylonJSScene,\n  Vector3,\n  Mesh\n} from '@babylonjs/core';\nimport { Path } from '../data/Path';\nimport getColorFromString from '../utils/getColorFromString';\nimport { useBabylonScene } from 'react-babylonjs';\n\ntype Props = {\n  n: number;\n  data: Path[];\n};\n\nconst onSceneMount = async (scene: BabylonJSScene) => {\n  const mesh = scene.meshes.filter(item => item.name === 'airport');\n  if (mesh.length > 0) {\n    mesh.map(item => (item.billboardMode = Mesh.BILLBOARDMODE_ALL));\n  }\n};\n\nconst Paths: React.FC<Props> = (props: Props) => {\n  const scene = useBabylonScene();\n  const [component, setComponent] = useState([] as JSX.Element[]);\n\n  useEffect(() => {\n    setComponent([] as JSX.Element[]);\n    const f = async () => {\n      const array = await props.data.map((item: Path, index: number) => (\n        <tube\n          id={`path ${item.airline}`}\n          name={`path`}\n          path={item.traces.map(t => new Vector3(t.x, t.y, t.z))}\n          radius={0.3}\n        >\n          <standardMaterial\n            name={`path material`}\n            emissiveColor={getColorFromString(item.airline)}\n          ></standardMaterial>\n        </tube>\n      ));\n      await setComponent(array);\n      await onSceneMount(scene!);\n    };\n\n    f();\n    console.log(component);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.data]);\n\n  return <>{component}</>;\n};\n\nexport default Paths;\n","import React, { useEffect } from 'react';\nimport { Flight } from '../data/Flight';\nimport {\n  Color3,\n  Scene as BabylonJSScene,\n  Mesh,\n  Vector3,\n  Matrix,\n  Axis\n} from '@babylonjs/core';\nimport { useBabylonScene } from 'react-babylonjs';\nimport { Control } from '@babylonjs/gui/2D/controls/control';\nimport getPoint from '../utils/getPoint';\n\ntype Info = {\n  info: Flight;\n};\n\nconst InfoPanel: React.FC<Info> = (props: Info) => {\n  const onSceneMount = async (scene: BabylonJSScene) => {\n    const mesh = scene.getMeshByID('infoPanel');\n    if (mesh !== null) {\n      mesh.billboardMode = Mesh.BILLBOARDMODE_ALL;\n      const camera = scene.activeCamera;\n      const flightPosition = getPoint(\n        props.info.latitude,\n        props.info.longitude\n      ).scale(0.7);\n      console.log(flightPosition);\n      const direction = camera!.getForwardRay().direction;\n      mesh.position = camera!.position.subtract(\n        camera!.position\n          .subtract(flightPosition)\n          .normalize()\n          .scale(500)\n      );\n      // const matrix = Matrix.RotationAxis(Axis.X, Math.PI / 6);\n      // mesh.position = Vector3.TransformCoordinates(mesh.position, matrix);\n    }\n  };\n\n  const scene = useBabylonScene();\n\n  useEffect(() => {\n    const f = async () => {\n      await onSceneMount(scene!);\n    };\n    console.log(props);\n    f();\n  });\n\n  return (\n    <>\n      {props.info !== undefined ? (\n        <plane\n          id={`infoPanel`}\n          name={`infoPanel`}\n          width={400}\n          height={400}\n          position={Vector3.Zero()}\n          renderingGroupId={1}\n        >\n          <advancedDynamicTexture\n            name=\"dialogTexture\"\n            height={1024}\n            width={1024}\n            createForParentMesh={true}\n          >\n            <rectangle name=\"rect-1\" height={150} width={150}>\n              <rectangle>\n                <textBlock\n                  text={Array(8)\n                    .fill(0)\n                    .map(\n                      (item, index) =>\n                        `${Object.keys(props.info)[index]}: ${\n                          Object.values(props.info)[index]\n                        } \\r\\n`\n                    )\n                    .toString()\n                    .replace(/,/g, '')}\n                  fontFamily=\"Segoe UI\"\n                  fontSize={48}\n                  color=\"#222222\"\n                  outlineWidth={4}\n                  outlineColor={'white'}\n                  alpha={0.5}\n                  horizontalAlignment={Control.HORIZONTAL_ALIGNMENT_LEFT}\n                />\n              </rectangle>\n            </rectangle>\n          </advancedDynamicTexture>\n        </plane>\n      ) : null}\n    </>\n  );\n};\n\nexport default InfoPanel;\n","import airports from '../data/airports.json';\nimport { Airport } from '../data/Airport.js';\n\nconst getAirport = (iata?: string, icao?: string): Airport => {\n  return iata !== undefined\n    ? airports.filter(item => item.iata === iata)[0]\n    : airports.filter(item => item.iata === icao)[0];\n};\n\nexport default getAirport;\n","import getAirport from './getAirport';\nimport { SpeechRecognizer } from 'microsoft-cognitiveservices-speech-sdk';\nimport fetchData from './fetchData';\n\nconst recognizeInput = async (recognizer: SpeechRecognizer, client: any) => {\n  console.log(2);\n  recognizer.recognizeOnceAsync(\n    async _result => {\n      if (_result.text === undefined) return;\n      console.log(3);\n      const result: string = _result.text.substring(0, _result.text.length - 1);\n      console.log(result);\n      switch (result.split(' ')[0]) {\n        case 'Airport': {\n          const param = result.split(' ')[1];\n          if (param.length === 3) {\n            const airport = getAirport(param);\n            if (airport === undefined) return;\n            await fetchData({ airport: airport.icao }, client);\n          } else {\n            await fetchData({ airport: param }, client);\n          }\n          break;\n        }\n        case 'Aircraft': {\n          const param = result.split(' ')[1];\n          await fetchData(\n            { aircraft: param.substring(0, param.length - 1) },\n            client\n          );\n          break;\n        }\n        case 'Airline': {\n          const param = result.split(' ')[1];\n          await fetchData(\n            { airline: param.substring(0, param.length - 1) },\n            client\n          );\n          break;\n        }\n        default:\n          await fetchData({}, client);\n          break;\n      }\n      console.log(4);\n    },\n    (error: any) => {\n      console.log('err - ' + error);\n    }\n  );\n};\n\nexport default recognizeInput;\n","// MIT License\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE\n\nimport * as sdk from 'microsoft-cognitiveservices-speech-sdk';\n\nconst speechToText = () => {\n  const subscriptionKey = '4dcd305c84f6481c9742e030334af7cc';\n  const serviceRegion = 'westus';\n\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\n    subscriptionKey,\n    serviceRegion\n  );\n\n  speechConfig.speechRecognitionLanguage = 'en-US';\n\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n  return recognizer;\n};\n\nexport default speechToText;\n","import { Engine, Scene, BabylonJSContext } from 'react-babylonjs';\nimport {\n  Vector3,\n  Color3,\n  AbstractMesh,\n  Scene as BabylonJSScene,\n  Matrix,\n  Camera,\n  WebVRFreeCamera,\n  PointerInfo,\n  Mesh\n} from '@babylonjs/core';\nimport React, { useState, useContext } from 'react';\nimport texture from '../data/texture.jpg';\nimport sky from '../data/sky.jpg';\nimport { ApolloProvider, useQuery } from '@apollo/react-hooks';\n\nimport Flights from './Flights';\nimport { gql } from 'apollo-boost';\nimport Airports from './Airports';\nimport Paths from './Paths';\nimport InfoPanel from './InfoPanel';\nimport recognizeInput from '../utils/recoginizeInput';\nimport speechToText from '../utils/speechToText';\nimport fetchData from '../utils/fetchData';\nimport { Flight } from '../data/Flight';\n\nconst query = gql`\n  {\n    lastFetch {\n      time\n    }\n    flights @client {\n      ident\n      type\n      latitude\n      longitude\n      origin\n      destination\n      groundspeed\n      heading\n      waypoints\n    }\n    paths @client {\n      airline\n      traces {\n        x\n        y\n        z\n      }\n    }\n    airports @client {\n      icao\n      iata\n      latitude\n      longitude\n      large\n      selected\n    }\n  }\n`;\n\ntype Props = {\n  apolloClient: any;\n};\n\nconst initialInfo = {\n  ident: '',\n  type: '',\n  latitude: 0,\n  longitude: 0,\n  origin: '',\n  destination: '',\n  groundspeed: 0,\n  heading: 0,\n  waypoints: ''\n};\n\nconst Main: React.FC<Props> = (props: Props) => {\n  const recognizer = speechToText();\n  const { data } = useQuery(query, { client: props.apolloClient });\n  const [info, setInfo] = useState({} as Flight);\n  const [isVR, setIsVr] = useState(false);\n\n  const onScenePointerUp = async (\n    event: PointerInfo,\n    scene: BabylonJSScene\n  ) => {\n    console.log(event);\n    let destination: Vector3 = scene.activeCamera!.position;\n    const mesh = event.pickInfo!.hit ? event.pickInfo!.pickedMesh : null;\n    if (mesh === null) return;\n    switch (mesh.name) {\n      case 'airport':\n        destination = mesh.position.scale(1.3);\n        fetchData({ airport: mesh.id.split(' ')[1] }, props.apolloClient);\n        break;\n      case 'flight':\n        destination = mesh.position.scale(1.1);\n        fetchData({ aircraft: mesh.id.split(' ')[1] }, props.apolloClient);\n        break;\n      case 'path':\n        fetchData({ airline: mesh.id.split(' ')[1] }, props.apolloClient);\n        break;\n      case 'sky':\n        console.log(isVR);\n        if (!isVR) recognizeInput(recognizer, props.apolloClient);\n        break;\n      default:\n        return;\n    }\n    scene.activeCamera!.position = destination;\n  };\n\n  const onScenePointerMove = async (\n    event: PointerInfo,\n    scene: BabylonJSScene\n  ) => {\n    const mesh = event.pickInfo!.hit ? event.pickInfo!.pickedMesh : null;\n    if (mesh === null) return;\n    switch (mesh.name) {\n      case 'flight':\n        {\n          const array = mesh.id.split(' ');\n          setInfo({\n            ident: array[2],\n            type: array[1],\n            latitude: Number(array[3]),\n            longitude: Number(array[4]),\n            origin: array[5],\n            destination: array[6],\n            groundspeed: Number(array[7]),\n            heading: Number(array[8]),\n            waypoints: array[9],\n            __typename: 'flight'\n          });\n        }\n        console.log(mesh);\n        break;\n      default:\n        setInfo({} as Flight);\n        break;\n    }\n  };\n\n  const onSceneMount = async (event: { scene: BabylonJSScene }) => {\n    const scene = event.scene;\n    const vrHelper = scene.createDefaultVRExperience();\n    vrHelper.enableInteractions();\n    vrHelper.currentVRCamera!.position = new Vector3(-100, 30, -100);\n    await vrHelper.onControllerMeshLoaded.add(contoller => {\n      vrHelper.displayLaserPointer = true;\n      setIsVr(true);\n      contoller.onPadValuesChangedObservable.add(state => {\n        if (contoller.hand === 'right') {\n          const rotation = (vrHelper.currentVRCamera as WebVRFreeCamera)\n            .deviceRotationQuaternion;\n          console.log(rotation);\n\n          const move = new Vector3(state.x * 10, 0, -state.y * 10);\n          move.rotateByQuaternionToRef(rotation, move);\n          vrHelper.position = vrHelper.position.add(move);\n        }\n      });\n      contoller.onTriggerStateChangedObservable.add(async state => {\n        if (contoller.hand === 'right' && state.value === 1) {\n          await recognizeInput(recognizer, props.apolloClient);\n        }\n      });\n    });\n  };\n\n  const [projection, setProjection] = useState(0);\n  console.log('Main');\n\n  return (\n    <Engine\n      babylonJSContext={useContext(BabylonJSContext)}\n      antialias\n      width={(window as any).innerWidth}\n      height={(window as any).innerHeight}\n      canvasId=\"canvas\"\n    >\n      <Scene\n        onScenePointerMove={onScenePointerMove}\n        onScenePointerUp={onScenePointerUp}\n        onSceneMount={onSceneMount}\n      >\n        <arcRotateCamera\n          name=\"camera\"\n          target={new Vector3(0, 0, 0)}\n          alpha={-Math.PI / 2}\n          beta={Math.PI / 4}\n          radius={250}\n          lowerRadiusLimit={101}\n          upperRadiusLimit={1000}\n          wheelPrecision={10}\n        />\n        <hemisphericLight\n          name=\"light\"\n          intensity={0.1}\n          direction={new Vector3(1, 1, 1)}\n        />\n        <sphere\n          name=\"globe\"\n          diameter={200}\n          segments={64}\n          position={Vector3.Zero()}\n        >\n          <standardMaterial\n            createForParentMesh\n            name={'globeMaterial'}\n            specularColor={new Color3(0, 0, 0)}\n          >\n            <texture\n              name={'globeTexture'}\n              url={texture}\n              onLoad={() => {\n                setProjection(8);\n              }}\n              coordinatesMode={projection}\n            />\n          </standardMaterial>\n        </sphere>\n        <ApolloProvider client={props.apolloClient}>\n          <Flights\n            n={data.lastFetch.time}\n            data={{ airports: data.airports, flights: data.flights }}\n          />\n          <Airports n={data.lastFetch.time} data={data.airports} />\n          <Paths n={data.lastFetch.time} data={data.paths} />\n          <InfoPanel info={info} />\n        </ApolloProvider>\n        <sphere\n          name=\"sky\"\n          diameter={5000}\n          segments={8}\n          position={Vector3.Zero()}\n          sideOrientation={1}\n        >\n          <standardMaterial\n            createForParentMesh\n            name={'skyMaterial'}\n            specularColor={new Color3(0, 0, 0)}\n            emissiveColor={new Color3(0, 0, 0)}\n          >\n            <texture\n              name={'skyTexture'}\n              url={sky}\n              onLoad={() => {\n                setProjection(8);\n              }}\n              coordinatesMode={projection}\n            />\n          </standardMaterial>\n        </sphere>\n      </Scene>\n    </Engine>\n  );\n};\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import airports from './airports.json';\n\nexport type Airport = {\n  icao: string;\n  iata: string;\n  latitude: number;\n  longitude: number;\n  large: boolean;\n  selected: number;\n  __typename: string;\n};\n\nexport const icaoList = airports.map(item => item.icao);\nexport const iataList = airports.map(item => item.icao);\n","import axios from 'axios';\nimport config from './config';\nimport { Flight } from '../data/Flight';\nimport { icaoList } from '../data/Airport';\nimport { useApolloClient, useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\ntype Args = {\n  airport?: string;\n  aircraft?: string;\n  airline?: string;\n};\n\nconst query = gql`\n  {\n    airports @client {\n      icao\n      latitude\n      longitude\n      large\n      selected\n    }\n  }\n`;\n\nconst fetchData = async (args: Args, client: any) => {\n  axios\n    .post('https://ecs289h-2019-fetch.azurewebsites.net/api/fecthData', null, {\n      params: {\n        ...args,\n        code: 'qbIqca3zv/n3ah0am91hFMggblzCbCvYb5vtOhamariZaDfaqFO9cw=='\n      }\n    })\n    .then(response => {\n      console.log(response);\n      if (response.data.SearchBirdseyeInFlightResult !== undefined) {\n        client.writeData({\n          data: {\n            flights: response.data.SearchBirdseyeInFlightResult.aircraft\n              .filter(\n                (item: { origin: string; destination: string }) =>\n                  icaoList.includes(item.origin) &&\n                  icaoList.includes(item.destination)\n              )\n              .map((item: any) => ({ ...item, __typename: 'flight' })),\n            lastFetch: {\n              time: Date.now(),\n              __typename: 'lastFetch'\n            }\n          }\n        });\n      }\n    });\n};\n\nexport default fetchData;\n"],"sourceRoot":""}